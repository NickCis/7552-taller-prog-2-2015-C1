Uniform Interface
1) HTTP (GET, PUT, POST, DELETE)
2) URIs (Resource name)
3) HTTP response (Status body)

Cacheable
Implicit
Explicit
Negotiable

Scalability
Simplicity
Modifiability
Visibility
Portability
Reliability


1)
REST se implementa mediante invocaciones a sustantivos, y no acciones.
Los verbos que se utilizan son 4:

GET
Requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)

POST
Requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.

PUT
Requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.

DELETE
Deletes the specified resource.

Adicionalmente existen otros verbos que se pueden usar que son:
HEAD
TRACE
OPTIONS
CONNECT
PATCH

Para usarlos se concatena el verbo + la URI del recurso + el tipo de protocolo http utilizado.

Ejemplos:

GET /whatsapp/users/rodri/profile HTTP/1.1
Host: lacompuderodri.com
Authentication: hmac rodri:123456:[digest]
Date: 17 mar 2015 13:45:23

POST /whatsapp/users/rodri/name HTTP/1.1
Host: lacompuderodri.com
Authentication: hmac rodri:123456:[digest]
Date: 17 mar 2015 13:45:23

name="rodri_bourdet"

DELETE /whatsapp/users/rodri HTTP/1.1
Host: lacompuderodri.com
Authentication: hmac rodri:123456:[digest]
Date: 17 mar 2015 13:45:23

Podría utilizarse tambien JSON para enviar las requests:

Ejemplo:

POST /whatsapp/users/rodri.json HTTP/1.1
Host: lacompuderodri.com
Content-Type: application/json
Accept: application/json

{
   "name" : "rodri_bourdet",
   "first-name" : "Rodri",
   "last-name" : "Bourdet",
   "display-name" : "El rodri de la gente",
   "email" : "rbourdet@gmail.com",
   "password" : {
      "value" : "pitochi"
   },
   "active" : true
}

2)
Las URIs son las ubicaciones de cada recurso a obtener, agregar, modificar o borrar
La base de estas sera:
whatsapp/

URIs importantes:

whatsapp/users (lista de usuarios)
whatsapp/users/rodri/profile (perfil de un usuario)
whatsapp/messages/rodri (lista de mensajes)


Login
-----

No existe el login de modo que en cada mensaje se debera enviar toda la informacion requerida del cliente. Para esto se utilizara HMAC (ver ejemplo de uso del verbo GET en el apartado 1)
Se creara un digest con la informacion requerida de la siguiente forma:
digest = base64encode(hmac("sha256", "password", "GET+/whatsapp/users/rodri/profile+17mar201513:45:23+123456"))
Lo anterior es el digest que sirve para el ejemplo del uso del verbo GET en el apartado 1)
Se agrego ademas un numero que solo se utilizara una vez, para aumentar la seguridad.
La fecha se agrega para evitar reenvios.

3)
HTTP response
-------------

Se define las siguientes estructuras JSON que se utilizaran para las respuestas del servidor:

OK:
{
	"code" : "200"
	"message" : "mensaje segun el evento que respondio"
}

Autenticacion correcta:
{
   "expand" : "attributes",
   "name" : "rodri_bourdet",
   "first-name" : "Rodri",
   "last-name" : "Bourdet",
   "display-name" : "El rodri de la gente",
   "email" : "rbourdet@gmail.com",
   "password" : {
      "link" : {
         "rel" : "edit",
         "href" : "http://lacompuderodri.com:8095/whatsapp/users/rodri/password"
      }
   },
   "active" : true,
   "attributes" : {
      "link" : {
         "rel" : "self",
         "href" : "http://lacompuderodri.com:8095/whatsapp/users/rodri/attributes"
      },
      "attributes" : []
   }
}

Autenticacion incorrecta:
{
   "reason" : "INVALID_USER_AUTHENTICATION",
   "message" : "Failed to authenticate principal, password was invalid"
}


1XX Informational
-----------------
This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. There are no required headers for this class of status code. Since HTTP/1.0 did not define any 1xx status codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client except under experimental conditions.
A client MUST be prepared to accept one or more 1xx status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message. Unexpected 1xx status responses MAY be ignored by a user agent.
Proxies MUST forward 1xx responses, unless the connection between the proxy and its client has been closed, or unless the proxy itself requested the generation of the 1xx response. (For example, if a proxy adds a "Expect: 100-continue" field when it forwards a request, then it need not forward the corresponding 100 (Continue) response(s).)

100 Continue
101 Switching Protocols
102 Processing (WebDAV)


2XX Success
-----------

This class of status code indicates that the client's request was successfully received, understood, and accepted.

200 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No Content
205 Reset Content
206 Partial Content
207 Multi-Status (WebDAV)
208 Already Reported (WebDAV)
226 IM Used

200 OK
The request has succeeded. The information returned with the response is dependent on the method used in the request, for example:

GET an entity corresponding to the requested resource is sent in the response;
HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;
POST an entity describing or containing the result of the action;
TRACE an entity containing the request message as received by the end server.

201 Created
The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.
A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created, see section 14.19.

204 No Content
The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.
If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view.
The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.


3XX Redirection
---------------

This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. The action required MAY be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD. A client SHOULD detect infinite redirection loops, since such loops generate network traffic for each redirection.
Note: previous versions of this specification recommended a maximum of five redirections. Content developers should be aware that there might be clients that implement such a fixed limitation.

300 Multiple Choices
301 Moved Permanently
302 Found
303 See Other
304 Not Modified
305 Use Proxy
306 (Unused)
307 Temporary Redirect
308 Permanent Redirect (experiemental)

304 Not Modified
If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.
The response MUST include the following header fields:
Date, unless its omission is required by section 14.18.1
If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly.
ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request
Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant
If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.
If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.
If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response.


4XX Client Error
----------------

The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents SHOULD display any included entity to the user.
If the client is sending data, a server implementation using TCP SHOULD be careful to ensure that the client acknowledges receipt of the packet(s) containing the response, before the server closes the input connection. If the client continues sending data to the server after the close, the server's TCP stack will send a reset packet to the client, which may erase the client's unacknowledged input buffers before they can be read and interpreted by the HTTP application.

400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406 Not Acceptable
407 Proxy Authentication Required
408 Request Timeout
409 Conflict
410 Gone
411 Length Required
412 Precondition Failed
413 Request Entity Too Large
414 Request-URI Too Long
415 Unsupported Media Type
416 Requested Range Not Satisfiable
417 Expectation Failed
418 I'm a teapot (RFC 2324)
420 Enhance Your Calm (Twitter)
422 Unprocessable Entity (WebDAV)
423 Locked (WebDAV)
424 Failed Dependency (WebDAV)
425 Reserved for WebDAV
426 Upgrade Required
428 Precondition Required
429 Too Many Requests
431 Request Header Fields Too Large
444 No Response (Nginx)
449 Retry With (Microsoft)
450 Blocked by Windows Parental Controls (Microsoft)
499 Client Closed Request (Nginx)

400 Bad Request
The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.

401 Unauthorized
The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in "HTTP Authentication: Basic and Digest Access Authentication".

403 Forbidden
The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.

404 Not Found
The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.

409 Conflict
The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required.
Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type.


5XX Server Error
----------------

Response status codes beginning with the digit "5" indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. User agents SHOULD display any included entity to the user. These response codes are applicable to any request method.

500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
506 Variant Also Negotiates (Experimental)
507 Insufficient Storage (WebDAV)
508 Loop Detected (WebDAV)
509 Bandwidth Limit Exceeded (Apache)
510 Not Extended
511 Network Authentication Required
598 Network read timeout error
599 Network connect timeout error

500 Internal Server Error
The server encountered an unexpected condition which prevented it from fulfilling the request.

Valores de retorno recomendados para REST

Collections
-----------

GET
200 (OK), list of customers. Use pagination, sorting and filtering to navigate big lists.

PUT
404 (Not Found), unless you want to update/replace every resource in the entire collection.

POST
201 (Created), 'Location' header with link to /customers/{id} containing new ID.

DELETE
404 (Not Found), unless you want to delete the whole collectionnot often desirable.

Specific Item
-------------

GET
200 (OK), single customer. 404 (Not Found), if ID not found or invalid.

PUT
200 (OK) or 204 (No Content). 404 (Not Found), if ID not found or invalid.

POST
404 (Not Found).

DELETE
200 (OK). 404 (Not Found), if ID not found or invalid.